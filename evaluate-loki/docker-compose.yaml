version: '3.8'

networks:
  loki:
    driver: "bridge"

volumes:
  loki_data:
  minio_data:
  grafana_data:
  prometheus_data:
  alloy_data:
  consul_data:

services:
  # Updated Loki services with proper dependencies
  read:
    image: grafana/loki:3.4.2
    container_name: loki-read
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - "3101:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      - loki_data:/loki
    environment:
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      minio:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 30s
    networks:
      - loki

  write:
    image: grafana/loki:3.4.2
    container_name: loki-write
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - "3102:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      - loki_data:/loki
    environment:
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      minio:
        condition: service_healthy
      consul:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 15s
      timeout: 15s
      retries: 10
      start_period: 30s
    networks:
      - loki

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - alloy_data:/var/lib/alloy/data
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      gateway:
        condition: service_healthy
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000:9000
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/ready" ]  # Changed from /live to /ready
      interval: 20s
      timeout: 30s  # Increased timeout
      retries: 10   # More retries
      start_period: 30s  # Added grace period
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - ./datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki

  backend:
    image: grafana/loki:3.4.2
    container_name: loki-backend
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
      - loki_data:/loki
    environment:
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      minio:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - loki

  gateway:
    image: nginx:latest
    depends_on:
      read:
        condition: service_healthy
      write:
        condition: service_healthy
      consul:
        condition: service_healthy
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3100"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - loki
    # Consul service with explicit version
  # Consul service with explicit version
  consul:
    image: consul:1.15
    container_name: consul
    ports:
      - "8500:8500"
    volumes:
      - consul_data:/consul/data
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    networks:
      - loki
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger tracing
  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "16686:16686"
    networks:
      - loki
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - loki

  student-service:
    image: student_ms:v1
    ports:
      - "8081:8081"
    networks:
      - loki
    depends_on:
      grafana:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl --fail --silent localhost:8081/actuator/health | tr -d '\\n' | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8070/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - SPRING_APPLICATION_NAME=student-service

  course-service:
    image: course_ms:v1
    expose:
      - "8080" #Let the docker engine set this port to any of the replicas by load balancing
    networks:
      - loki
    depends_on:
      grafana:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "sh", "-c", "curl --fail --silent localhost:8080/actuator/health | tr -d '\\n' | grep -q '\"status\":\"UP\"'"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    deploy:
      replicas: 2 # two replicas will be created
    environment:
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8070/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true
      - SPRING_APPLICATION_NAME=course-service

  gwserver:
    image: gwserver:v1
    container_name: gwserver
    ports:
      - "8079:8079"
    networks:
      - loki
    environment:
      - SPRING_APPLICATION_NAME=gwserver
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8070/eureka/
      - EUREKA_INSTANCE_PREFERIPADDRESS=true

  eureka:
    image: eureka:v1
    ports:
      - "8070:8070"
    networks:
      - loki
    healthcheck:
      test: ["CMD", "sh", "-c", "curl --fail --silent localhost:8070/actuator/health | tr -d '\\n' | grep -q '\"status\":\"UP\"'"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 60s
    environment:
      - EUREKA_CLIENT_REGISTER-WITH-EUREKA=false
      - EUREKA_CLIENT_FETCH-REGISTRY=false
      - EUREKA_SERVER_ENABLE-SELF-PRESERVATION=false
      - EUREKA_INSTANCE_HOSTNAME=eureka
    