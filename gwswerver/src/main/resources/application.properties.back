spring.application.name=gwswerver
server.port=8079
#Managment properties by actuator
management.metrics.tags.application=${spring.application.name}
management.endpoints.web.exposure.include=*
management.endpoint.prometheus.access=UNRESTRICTED
management.endpoint.health.access=UNRESTRICTED
management.endpoint.info.access=UNRESTRICTED
management.endpoint.metrics.access=UNRESTRICTED
#management.endpoint.shutdown.access=UNRESTRICTED
management.endpoint.health.show-details=always

# Eureka Client Configuration
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://eureka:8070/eureka/
eureka.instance.prefer-ip-address=true
info.app.name=gwserver
info.app.version=v1
info.app.description=This is the Gateway Server

#Gateway Server Configurations
#Enables/disables the entire Gateway runtime
spring.cloud.gateway.enabled=true
# below property Enables auto-creation of routes for services registered in a service discovery (e.g., Eureka, Consul, Nacos)
spring.cloud.gateway.discovery.locator.enabled=true
# In Eureka all the services are in Uppercase and for this the URL needs to be Upper case which looks odd, to make the URL lower case below property is used 
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
management.endpoint.gateway.access=UNRESTRICTED

#Logging related properties
logging.level.com.hasan.gwserver=DEBUG
logging.pattern.level="%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

#Resiliencey related properties using circuit breaker and timeout and retries
# Student Service Circuit breaker (Commented off as we configured the circuit breaker from java)
#spring.cloud.gateway.routes[0].id=student-service
#spring.cloud.gateway.routes[0].uri=lb://STUDENT-SERVICE
#spring.cloud.gateway.routes[0].predicates[0]=Path=/monitoring/student/**
#spring.cloud.gateway.routes[0].filters[0]=RewritePath=/monitoring/student/(?<segment>.*), /${segment}
#spring.cloud.gateway.routes[0].filters[1]=CircuitBreaker=studentCB,fallbackUri=forward:/fallback/student
# Course Circuit breaker (Commented off as we configured the circuit breaker from java)
#spring.cloud.gateway.routes[1].id=course-service
#spring.cloud.gateway.routes[1].uri=lb://COURSE-SERVICE
#spring.cloud.gateway.routes[1].predicates[0]=Path=/monitoring/course/**
#spring.cloud.gateway.routes[1].filters[0]=RewritePath=/monitoring/course/(?<segment>.*), /${segment}
#spring.cloud.gateway.routes[1].filters[1]=CircuitBreaker=courseCB,fallbackUri=forward:/fallback/course

# Resilience4J Circuit Breaker - Student Service
resilience4j.circuitbreaker.instances.studentCB.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.studentCB.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.studentCB.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.instances.studentCB.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.studentCB.sliding-window-size=8
resilience4j.circuitbreaker.instances.studentCB.minimum-number-of-calls=8
resilience4j.timelimiter.instances.studentCB.timeout-duration=2s

# Resilience4J Circuit Breaker - Course Service
resilience4j.circuitbreaker.instances.courseCB.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.courseCB.wait-duration-in-open-state=30s
resilience4j.circuitbreaker.instances.courseCB.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.instances.courseCB.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.instances.courseCB.sliding-window-size=8
resilience4j.circuitbreaker.instances.courseCB.minimum-number-of-calls=8
resilience4j.timelimiter.instances.courseCB.timeout-duration=2s


# Retry Configuration for both services (Commented off intentionally as we don't need this)
#spring.cloud.gateway.default-filters[0]=Retry=3,SERVER_ERROR,GET,POST,TimeoutException,IOException,100ms,1s,2,false

# Function definition (multiple functions separated by '|')
spring.cloud.function.definition=updateNotificationStatus

# Spring Cloud Stream Bindings
spring.cloud.stream.bindings.updateNotificationStatus-in-0.destination=notification-sent
spring.cloud.stream.bindings.updateNotificationStatus-in-0.group=${spring.application.name}
spring.cloud.stream.bindings.sendNotification-out-0.destination=send-notification

# RabbitMQ connection
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.connection-timeout=10s